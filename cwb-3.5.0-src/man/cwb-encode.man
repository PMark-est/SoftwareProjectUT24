.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CWB-ENCODE 1"
.TH CWB-ENCODE 1 "2022-07-22" "3.5.0" "IMS Open Corpus Workbench"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cwb\-encode \- The CWB corpus encoding utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBcwb-encode\fR [\-xsBCn9vqDh] [\-d \fIdata_directory\fR] [\-R \fIregistry_file\fR] [\-U \fIstring\fR] 
    \-f \fIinput_file\fR [...] \-F \fIinput_directory\fR [...] [\-c \fIcharset\fR] 
    [\-p \- | \-p <attribute>] [\-N <id_attribute>] [\-L <sentence_attribute>] [\-b \fInum\fR] 
    (\-P \fIattribute\fR | \-S \fIattribute_spec\fR | \-V \fIattribute_spec\fR | \-0 \fIattribute\fR)*
.PP
\&... | \fBcwb-encode\fR [\fIoptions\fR]\ [\fIdeclarations\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBcwb-encode\fR performs the first step in the indexing of a \s-1CWB\s0 corpus: it reads in vertical-format text,
and converts it to the \s-1CWB\s0 binary index format.
.PP
\&\s-1CWB\s0 indexes consist of a set of binary files, held in some \fIdata directory\fR; the location of the data
files, as well as other metadata, is contained in a \fIcorpus registry\fR file. All \s-1CWB\s0 applications
use the registry files \- usually collected together in a single registry directory \- to access the
indexed corpora.
.PP
The \fBcwb-encode\fR utility is what creates this setup in the first place. It processes a corpus in
verticalised format; this may be piped to \fBcwb-encode\fR's standard input from some other program,
or it may be loaded from one or more input files specified with the \fB\-f\fR option; see below.
.PP
In either case, the \fBcwb-encode\fR command line describes both the structure of the data and specifies
details of the index to be generated, including the location of the data directory and the registry. The format
and location of the resulting index is determined by the configuration of \fBcwb-encode\fR.
.PP
The purpose of this manual file is to explain the conventions for calling \fBcwb-encode\fR. It does not attempt
to explain all the details of the \s-1CWB\s0 data model or how encoding is accomplished. Nor does it discuss how
\&\fBcwb-encode\fR can be used to add additional attributes to an already-encoded corpus. For details on these other issues,
please refer to the \s-1CWB\s0 project's \fI\s-1CWB\s0 Encoding Manual\fR document.
.PP
When \fBcwb-encode\fR is invoked, as well as options, the p\-attributes and s\-attrributes of the corpus must be declared.
The declarations have the same format as options, but are \fBnot optional\fR!
.PP
P\-attributes correspond to \fIcolumns\fR in the input data. Each token occupies a single row and consists of
a series of tab-delimited values. Each tab-separated column is encoded as a separate p\-attribute.
.PP
The first p\-attribute in the input data is given the label \fIword\fR by default, as it is assumed to represent
the form of the token, with addiitonal p\-attributes representing word-level annotation. The \fB\-p\fR can be used to
change the default attribute label for the first column; additional columns must be declared with \fB\-P\fR flags.
.PP
S\-attributes can be declared with either \fB\-S\fR (without annotations) or \fB\-V\fR (with annotations).
In the input data, they must appear as opening and closing \s-1XML\s0 tags on separate lines. Additional \s-1XML\s0 awareness
can be enabled with the \fB\-x\fR option. Note, however, that \s-1CWB\s0 is \fInot\fR a fully XML-compliant application.
.PP
For each encoded attribute, one or more data files are created in the current working directory
(or in another directory specified with \fB\-d\fR).
.PP
The overall name of the corpus is determined by the name of its registry file. Registry files contain a formalised
description of an indexed corpus \- where its data files are, what p\- and s\-attributes it has, and so on.
Registry file names are all-lowercase
and can contain the letters a to z (no accents), the underscore, the hyphen, and the digits 0 to 9. The name
of the corpus is then the uppercased version of that filename. You can write a registry file yourself, but it
is strongly recommended to let \fBcwb-encode\fR do it for you using the \fB\-R\fR option.
.PP
After encoding, you should use \fBcwb-makeall\fR to create the
required index files and frequency lists, and then compress them with \fBcwb-huffcode\fR and
\&\fBcwb-compress-rdx\fR (or preferably use the \fBcwb-make\fR program from the CWB/Perl interface).
.PP
Two important notes on the usage of \fBcwb-encode\fR:
.IP "\(bu" 4
Command-line \fIoptions\fR (including input files specified with \fB\-f\fR) always have to
precede the \fIattribute declaration\fR flags!
.IP "\(bu" 4
If you re-encode an existing corpus, be sure to delete all old data files,
in particular the index and any compressed data files, before running \fBcwb-encode\fR!
.SH "OPTIONS"
.IX Header "OPTIONS"
Please note that the \s-1CWB\s0 utilities do not currently support GNU-style \f(CW\*(C`\-\-long\-options\*(C'\fR.
.IP "\fB\-b\fR \fInum\fR" 4
.IX Item "-b num"
Lexicon hash tables, where each hash contains a particular number of buckets of strings, are used in the indexing
process. This option allows the number of buckets to be set by the user. Users who do not already understand what hash table
buckets are do not need to understand this option.
.IP "\fB\-B\fR" 4
.IX Item "-B"
Makes the encoding process strip leading/trailing space characters from input lines and p\-attribute values. 
It is recommended to use this flag in most situations.
.IP "\fB\-c\fR \fIcharset\fR" 4
.IX Item "-c charset"
Specifies the character encoding of the corpus data. \fIcharset\fR can be any of the following:
.RS 4
.IP "ascii" 4
.IX Item "ascii"
\&\s-1ASCII\s0 (7\-bit characters only)
.IP "latin1" 4
.IX Item "latin1"
\&\s-1ISO\-8859\-1\s0 Western European
.IP "latin2" 4
.IX Item "latin2"
\&\s-1ISO\-8859\-2\s0 Central European
.IP "latin3" 4
.IX Item "latin3"
\&\s-1ISO\-8859\-3\s0 South European
.IP "latin4" 4
.IX Item "latin4"
\&\s-1ISO\-8859\-4\s0 North European
.IP "cyrillic" 4
.IX Item "cyrillic"
\&\s-1ISO\-8859\-5\s0 Latin/Cyrillic
.IP "arabic" 4
.IX Item "arabic"
\&\s-1ISO\-8859\-6\s0 Latin/Arabic
.IP "greek" 4
.IX Item "greek"
\&\s-1ISO\-8859\-7\s0 Latin/Greek
.IP "hebrew" 4
.IX Item "hebrew"
\&\s-1ISO\-8859\-8\s0 Latin/Hebrew
.IP "latin5" 4
.IX Item "latin5"
\&\s-1ISO\-8859\-9\s0 Turkish
.IP "latin6" 4
.IX Item "latin6"
\&\s-1ISO\-8859\-10\s0 Nordic
.IP "latin7" 4
.IX Item "latin7"
\&\s-1ISO\-8859\-13\s0 Baltic Rim
.IP "latin8" 4
.IX Item "latin8"
\&\s-1ISO\-8859\-14\s0 Celtic
.IP "latin9" 4
.IX Item "latin9"
\&\s-1ISO\-8859\-15\s0 Revised Western European
.IP "utf8" 4
.IX Item "utf8"
Unicode (\s-1UTF\-8\s0 encoding)
.RE
.RS 4
.Sp
If this option is left unspecified, \fIlatin1\fR data will be assumed. Please note that we may change the default
character set to \fIascii\fR or \fIutf8\fR, or even remove the default altogether (so that specifying a character set explicitly will be
obligatory), in future versions of \s-1CWB.\s0 For this reason you are recommended \fIalways\fR to supply a \fB\-c\fR declaration,
even if your corpus uses the default \s-1ISO\-8859\-1\s0 character set.
.Sp
The input data will be checked for validity according to the specified character set, so it is important
to declare the correct encoding!
.Sp
Note that, on Windows in particular, the most common encoding for plain text files is so-called \*(L"\s-1ANSI\*(R".\s0 Windows \*(L"\s-1ANSI\*(R"\s0
files are also found in the wild on other types of computer. This encoding uses one of a number of different Windows
code pages, for instance
Windows\-1256 in Arabic Windows, Windows\-1252 in English and other Western European Windows, and so on.
Some Windows code pages are completely incompatible with the related \s-1ISO\-8859\s0
standard (e.g. Windows\-1256 and \s-1ISO\-8859\-6\s0 encode Arabic in contrary ways). Others implement a superset of \s-1ISO\-8859.\s0 
\&\s-1CWB\s0 \fIdoes not\fR support these Windows code pages. In particular, please note that although similar,
Windows\-1252 cannot be treated as if it were Latin1, because it contains some code points 
that are invalid in Latin1 (for example, the \*(L"curly quote marks\*(R", the en-dash, and the em-dash). If you have
Windows\-1252 data, you \fImust\fR either use the \fB\-C\fR option, or (preferably) recode it to Latin1 or \s-1UTF\-8\s0
before encoding.
.RE
.IP "\fB\-C\fR" 4
.IX Item "-C"
Activates cleanup mode. In this mode, when a character occurs in the input data
that is not valid for the declared character encoding, instead of causing an error it will
be replaced by '?' in the indexed data.
For \s-1UTF\-8\s0 data, a '?' replaces each invalid \fIbyte\fR (so a single invalid character may be represented by a 
sequence of question marks).
.IP "\fB\-d\fR \fIdata_directory\fR" 4
.IX Item "-d data_directory"
Specifies that the data files that make up the encoded corpus index should be placed in \fIdata_directory\fR.
It is very strongly recommended to keep each corpus index in a directory that contains absolutely nothing else.
.Sp
This options must always be specified. If you want to use the current working directory, you should
specify \f(CW\*(C`\-d .\*(C'\fR . Note that the directory you specify must already exist \- \fBcwb-encode\fR will not create it for you.
.IP "\fB\-D\fR" 4
.IX Item "-D"
Activates debug mode; additional messages about what \fBcwb-encode\fR is doing will be printed on standard error.
.IP "\fB\-f\fR \fIinput_file\fR" 4
.IX Item "-f input_file"
Specifies that the corpus to be indexed should be read from \fIinput_file\fR.
.Sp
This option can be repeated for as many files as necessary. Files will be added to the corpus in the order that
they are specified. If no input files are specified, data will be read
from standard input (in this case, it would normally be piped from another application such as \fBcwb-decode\fR). 
Files whose names end in \f(CW\*(C`.gz\*(C'\fR or \f(CW\*(C`.bz2\*(C'\fR will be decompressed automatically.
.IP "\fB\-F\fR \fIinput_directory\fR" 4
.IX Item "-F input_directory"
Specifies that the corpus to be indexed should be read from all suitable files in \fIinput_directory\fR.
.Sp
\&\*(L"Suitable files\*(R" are those with the extensions \f(CW\*(C`.vrt\*(C'\fR, \f(CW\*(C`.vrt.gz\*(C'\fR or \f(CW\*(C`.vrt.bz2\*(C'\fR; 
files will be added to the corpus in alphabetical order (\s-1ASCII\s0).
.Sp
Multiple input directories can be specified (in which case each set of files will be alphabetically-ordered internally,
and the sets as a whole will be added in the order they are specified); but it is not possible to scan subdirectories recursively.
.IP "\fB\-h\fR" 4
.IX Item "-h"
Displays \fBcwb-encode\fR's help message, with short information about the usage of the command line options.  
This usage message will be also shown if \fBcwb-encode\fR is called with invalid options.
After the usage message is printed, \fBcwb-encode\fR will exit.
.IP "\fB\-q\fR" 4
.IX Item "-q"
Activates quiet mode; most warning messages will be suppressed.
.IP "\fB\-R\fR \fIregistry_file\fR" 4
.IX Item "-R registry_file"
Creates a registry entry (in the file \fIregistry_file\fR.
.Sp
The registry file is what gives the corpus its \*(L"name\*(R", that handle or label used to access it throughout \s-1CWB.\s0
.Sp
Corpus names have two format: all-lowercase and ALL-UPPERCASE. The registry filename uses the all-lowercase format,
whereas most programs (including \s-1CQP\s0) use the all-uppercase format. 
This means that the actual filename specified with \fB\-R\fR must only contain lowercase Latin letters (digits 0\-9, underscore,
and hyphen are also allowed). Due to character encoding issues, accented letters are not allowed in corpus names
(or in names of attributes) \- but this does not apply to the path of the directory that contains the registry file.
.Sp
So, if you specify \f(CW\*(C`\-R /home/CORPORA/very_big_corpus\*(C'\fR, then that file will be created, and will contain a
description of the index data (including where it is stored, what attributes there are, and so on). 
The corpus name that you use to access the corpus in \s-1CQP\s0 is then \s-1VERY_BIG_CORPUS.\s0
.Sp
If you do not use this option, you will need to create a registry file yourself before other \s-1CWB\s0 utilities
and \s-1CQP\s0 will be able to access the indexed corpus data. So use of \fB\-R\fR is very strongly recommended.
.Sp
It is usual to put all your registry files in a special corpus registry directory.
.IP "\fB\-s\fR" 4
.IX Item "-s"
Makes the encoding process skip any empty lines in the input data. It is recommended to use this flag in most situations.
.IP "\fB\-L\fR \fIsentence_attribute\fR" 4
.IX Item "-L sentence_attribute"
Blank lines are interpreted as sentence boundaries (or other textual units) and encoded in s\-attribute \fIsentence_attribute\fR.
This convention is used by the popular CoNLL format as well as various tokenizers and other \s-1NLP\s0 tools. The option \fB\-s\fR is implied. (Mnemonic: \fB\-L\fR stands for sentence \fBL\fRimits.)
.IP "\fB\-t\fR \fIinput_file\fR" 4
.IX Item "-t input_file"
Deprecated synonym for \fB\-f\fR, preserved for backward compatibility.
.IP "\fB\-U\fR \fIstring\fR" 4
.IX Item "-U string"
Specifies a string to be assigned as the value of an empty p\-attribute. Any column with any empty rows
will be indexed as if it had contained this \fIstring\fR everywhere that a gap actually occurred.
The default string for use in such \*(L"missing columns\*(R" is \f(CW\*(C`_\|_UNDEF_\|_\*(C'\fR.
.IP "\fB\-v\fR" 4
.IX Item "-v"
Activates verbose mode (progress messages will be printed on standard output while the corpus is being encoded).
.IP "\fB\-x\fR" 4
.IX Item "-x"
Activates XML-aware mode. In this mode, the basic \s-1XML\s0 entities (&gt; &lt; &amp; &quot; &apos;)
will be replaced in the indexed corpus by the characters they represent. Also, any input lines that begin with an 
\&\s-1XML\s0 comment (\f(CW\*(C`<!...\*(C'\fR) or an \s-1XML\s0 declaration (\f(CW\*(C`<?...\*(C'\fR) will be ignored.
.Sp
It is recommended to use this flag in most situations (unless the robust \fB\-n\fR input format is used).
.IP "\fB\-n\fR" 4
.IX Item "-n"
Activates an alternative input format in which tokens are numbered, i.e. every token line must start with a
non-negative integer number in the first tab-delimited column. Comment lines starting with a hash (\f(CW\*(C`#\*(C'\fR) are silently ignored (add \f(CW\*(C`\-B\*(C'\fR if there might be leading whitespace). This format avoids ambiguities between \s-1XML\s0 tags
and token lines; it is similar to formats used by CoNLL and SketchEngine.
The line numbers are ignored by \fBcwb-encode\fR and must not be declared with \fB\-P\fR or \fB\-p\fR; use \fB\-N\fR to encode line numbers.
.Sp
Line numbers of the form \f(CW\*(C`X\-Y\*(C'\fR and \f(CW\*(C`X.Y\*(C'\fR indicate multiword and trace tokens, respectively, in CoNLL-U format. They are
silently discarded.
.Sp
This format is a useful alternative to \fB\-x\fR, since many \s-1NLP\s0 tools don't work well with tokens containing \s-1XML\s0 entities.
It is the counterpart to \f(CW\*(C`cwb\-decode \-Cn\*(C'\fR and should ensure a safe decode-encode round trip.
.Sp
Note that the \fB\-n\fR and \fB\-x\fR options can be combined, though there is little reason to do so.
.IP "\fB\-N\fR \fIid_attribute\fR" 4
.IX Item "-N id_attribute"
Token \s-1ID\s0 numbers in the first column of the \fB\-n\fR input format are stored in the p\-attribute \fIid_attribute\fR
instead of being silently ignored. This option implies \fB\-n\fR mode, which does not need to be activated separately.
.Sp
Note that a round-trip decode of the resulting corpus uses \f(CW\*(C`cwb\-decode \-C\*(C'\fR (rather than \f(CW\*(C`\-Cn\*(C'\fR) because
the token numbers are already encoded in the corpus as the first p\-attribute.
.IP "\fB\-9\fR" 4
.IX Item "-9"
Auto-declare null attributes for unknown \s-1XML\s0 tags. Such tags will thus be ignored (with a warning message
printed once) rather than inserted as regular tokens.  This option is particuarly useful when encoding 
input files with complex and/or undocumented \s-1XML\s0 markup.
.SH "ATTRIBUTE DECLARATIONS"
.IX Header "ATTRIBUTE DECLARATIONS"
Note that all names of attributes must be in \s-1ASCII\s0 and consist only of letters, numbers, hyphen and underscore.
.IP "\fB\-p\fR \fIattribute\fR" 4
.IX Item "-p attribute"
Changes the name of the default p\-attribute (the first column) from \*(L"word\*(R" to \fIattribute\fR.
.IP "\fB\-p\fR \fI\-\fR" 4
.IX Item "-p -"
Declares that there is \fIno\fR default p\-attribute. In this case, all p\-attributes, including
the first column, must be declared with \fB\-P\fR.
.IP "\fB\-P\fR \fIattribute\fR" 4
.IX Item "-P attribute"
Declares \fIattribute\fR as a p\-attribute. The order in which the p\-attributes are declared
must reflect the order of the columns they refer to in the input data.
.Sp
If \f(CW\*(C`/\*(C'\fR is appended to the name of a p\-attribute, the contents of that p\-attribute are marked as a feature set.
In this case, the values within the feature set will be validated and normalised (i.a. sorted alphabetically).
\&\f(CW\*(C`cwb\-encode\*(C'\fR accepts feature sets without the leading and trailing \f(CW\*(C`|\*(C'\fR character (as used e.g. in CoNLL formats);
hence there will be no warnings if a regular annotation is delared as a feature set by mistaker.
An empty string (only possible with \f(CW\*(C`\-U ""\*(C'\fR) or single underscore (\f(CW\*(C`_\*(C'\fR, for CoNLL input) is converted to an empty set (\f(CW\*(C`|\*(C'\fR).
.IP "\fB\-S\fR \fIattribute_spec\fR" 4
.IX Item "-S attribute_spec"
Declares an s\-attribute without annotations.
.Sp
\&\fIattribute_spec\fR is the name of the attribute (i.e. the \s-1XML\s0 tag it corresponds to in the input data),
optionally followed by additional specifications, as follows.
.RS 4
.IP "\(bu" 4
It is normally assumed that s\-attribute regions will not be nested within another region of the same
s\-attribute. If you append \fI:num\fR to the
attribute specification, then up to \fInum\fR levels of nesting are allowed, with the nested regions automatically
renamed. So, for instance, if you specify \fInp:3\fR then the <np> element can be nested up to a depth of 3,
with extra s\-attributes \fInp1\fR, \fInp2\fR etc. generated automatically for the nested instances.
.Sp
If you specify \fI:0\fR, all nested regions will be ignored (highly recommended, otherwise every start tag will 
begin a new flat region).
.IP "\(bu" 4
\&\s-1XML\s0 attribute-value pairs can be auto-split and indexed as separate s\-attributes. In this case, you should append
the relevant attribute names to the attribute specification using + signs.
.Sp
For example, \f(CW\*(C`\-S s:0+id+len\*(C'\fR stores \s-1XML\s0 tags like \f(CW\*(C`<s id="abc" len=42\*(C'\fR> in s\-attributes s, s_id and s_len.
.IP "\(bu" 4
The values of \s-1XML\s0 tag attributes can be feature sets; you can append / to the relevant label
to switch on format validation and normalisation (e.g. \f(CW\*(C`\-S np:2+agr/+head\*(C'\fR).
.RE
.RS 4
.Sp
S\-attributes declared with \-S are \*(L"without annotations\*(R" because the instances of these s\-attributes are not linked 
to particular values. To take the example above, when we index \f(CW\*(C`\-S s:0+id+len\*(C'\fR, then the line \f(CW\*(C`<s id="abc" len=42\*(C'\fR>
generates three s\-attribute instances: one instance of \f(CW\*(C`s\*(C'\fR which has no value; one instance of \f(CW\*(C`s_id\*(C'\fR 
which has the value \fIabc\fR; and one instance of \f(CW\*(C`s_len\*(C'\fR which has the value \fI42\fR. 
While the split-off s\-attributes have values, the top-level s\-attribute based on the actual \s-1XML\s0 element does not. 
This means that any \s-1XML\s0 attribute-values that are not split off as separate S\-attributes are lost.
.Sp
It is possible for top-level attributes to have values, however, if they are declared with \fB\-V\fR instead of \fB\-S\fR.
See below.
.RE
.IP "\fB\-V\fR \fIattribute_spec\fR" 4
.IX Item "-V attribute_spec"
Declares an s\-attribute with annotations (a \*(L"valued\*(R" s\-attribute).
.Sp
See the discussion under \fB\-S\fR for an explanation of what it means for an S\-attribute to have annotations (\*(L"values\*(R")
or not. When an S\-attribute is declared with \fB\-V\fR, each instance of that attribute has a value consisting of the
original \s-1XML\s0 element's set of attribute-value pairs, stored as a single string. This is \fIin addition\fR to creating
extra S\-attributes for any \s-1XML\s0 attributes named in the usual \fIelement+att\fR manner.
.Sp
So for instance, when we index \f(CW\*(C`\-V s:0+id+len\*(C'\fR, then the line \f(CW\*(C`<s id="abc" len=42\*(C'\fR>
generates three s\-attribute instances: one instance of \f(CW\*(C`s\*(C'\fR which has the value \fIid=\*(L"abc\*(R" len=42\fR;
one instance of \f(CW\*(C`s_id\*(C'\fR which has the value \fIabc\fR; and one instance of \f(CW\*(C`s_len\*(C'\fR which has the value \fI42\fR.
.Sp
Declaring S\-attributes with \fB\-V\fR has the advantage that the input \s-1XML\s0 is fully reconstructible from the \s-1CWB\s0 index.
However, these annotations are not usually easily to search and manipulate. For searching in \s-1CQP,\s0 explicit declaration
of the \s-1XML\s0 attributes so that they will be split off as independent s\-attributes is preferable.
.Sp
Annotations can be features sets; append / to the relevant label to switch on format validation and normalisation.
.Sp
See also discussion under \fB\-S\fR above.
.IP "\fB\-0\fR \fIattribute\fR" 4
.IX Item "-0 attribute"
Declares \fIattribute\fR as a null s\-attribute. All \s-1XML\s0 tags that match a null s\-attribute will be ignored
and discarded from the input data.
.PP
All \s-1XML\s0 tags that have not been declared with a \fB\-S\fR, \fB\-V\fR or \fB\-0\fR flag will be encoded as literal tokens
(without annotations), accompanied by a warning message.
.SH "LIMITS ON NUMBER OF ATTRIBUTES"
.IX Header "LIMITS ON NUMBER OF ATTRIBUTES"
\&\fBcwb-encode\fR has a built-in limit on the number of attributes it can create, namely 2,048 attributes,
of which at most 1,024 can be p\-attributes and at most 1,024 can be s\-attributes.
.PP
However, in practice, you may not be able to go up to \s-1CWB\s0's limit of 2,048 attributes.
Encoding a corpus requires many files to be created simultaneously,
and most operating systems put a limit on the number of files a program can have open
at the same time. How you discover this limit depends on your operating system and, perhaps, your shell. 
If you are using the popular \fBbash\fR shell, you can find out the maximum open files per program
with the command \f(CW\*(C`ulimit \-n\*(C'\fR. A common maximum, especially on Linux, is 1,024.
.PP
A good rule of thumb for working with this OS-imposed limit is that 
each p\- or s\-attribute requires \fBcwb-encode\fR to have three open files.
(The exception: s\-attributes without annotations only require one open file.)
So, if you are working in an environment which imposes the 1,024\-file limit, 
the maximum number of attributes that you can be sure of creating safely is 341 (one-third of 1,024).
.PP
You can add more attributes using subsequent additional runs of \fBcwb-encode\fR (for p\-attributes)
or using \fBcwb-s-encode\fR (for s\-attributes).
.SH "INPUT FILE FORMAT"
.IX Header "INPUT FILE FORMAT"
The following is a summary of the rules for \s-1CWB\s0 input files; for more details, see \s-1DESCRIPTION\s0 above
and the \fI\s-1CWB\s0 Encoding Manual\fR:
.IP "\(bu" 4
The file must comply throughout with the character encoding that has been declared for the corpus.
.IP "\(bu" 4
\&\s-1UTF\-8\s0 files may (but do not have to) begin with the byte-order mark.
.IP "\(bu" 4
Files must contain one token per line.
.IP "\(bu" 4
Most punctuation marks should normally count as independent tokens, on lines of their own.
.IP "\(bu" 4
Each line consists of a series of tab-delimited p\-attributes.
.IP "\(bu" 4
The p\-attributes must come in the same order on every line.
.IP "\(bu" 4
The first p\-attribute is assumed to be the token wordform unless you specify otherwise (see above).
.IP "\(bu" 4
In the alternative \f(CW\*(C`\-n\*(C'\fR input format, token lines must be numbered in the first tab-delimited column.
.IP "\(bu" 4
P\-attribute values may have the form of feature sets; see the \fI\s-1CWB\s0 Encoding Manual\fR.
.IP "\(bu" 4
Files may also contain lines that specify begin and/or end-points of s\-attrbiutes.
.IP "\(bu" 4
These are given as \s-1XML\s0 tags, optionally with attributes.
.IP "\(bu" 4
\&\s-1XML\s0 attributes can also be have the form of feature sets; see the \fI\s-1CWB\s0 Encoding Manual\fR.
.IP "\(bu" 4
A line which contains an \s-1XML\s0 tag can contain only that one tag, and nothing else.
.IP "\(bu" 4
In \s-1XML\s0 mode, \s-1XML\s0 comments and declarations are also allowed, but must occupy individual lines.
.IP "\(bu" 4
Stray whitespace (extra spaces, empty lines) is not allowed, unless the \fB\-B\fR and \fB\-s\fR options are used.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "CoNLL input files"
.IX Subsection "CoNLL input files"
The various \fBCoNLL\fR formats (see e.g. <https://universaldependencies.org/format.html>) can be read directly
as \f(CW\*(C`cwb\-encode\*(C'\fR input files with the format options
.PP
.Vb 1
\&  \-n \-L s
.Ve
.PP
which ignores token numbers in the first column, skips comment lines and multiword/trace tokens, 
and encodes sentence breaks indicated by blank lines in the s\-attribute \f(CW\*(C`s\*(C'\fR.
If you want to preserve token IDs in a p\-attribute \f(CW\*(C`id\*(C'\fR, change the options to
.PP
.Vb 1
\&  \-N id \-L s
.Ve
.PP
Of course, the columns of the respective CoNLL format have to be declared with \fB\-P\fR flags as usual.
Feature set attributes should be marked with \f(CW\*(C`/\*(C'\fR (e.g. \f(CW\*(C`\-P morph/\*(C'\fR) so they are converted to \s-1CWB\s0 notation.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1CWB_USE_7Z\s0\fR" 4
.IX Item "CWB_USE_7Z"
If this environment variable is set (to any non-empty value), then \fBcwb-encode\fR will attempt to use the \fB7z\fR program 
(part of the 7\-zip suite) rather than \fBgzip\fR, \fBbzip2\fR or \fBxz\fR when writing from or reading to filenames with the
extensions \f(CW\*(C`.gz/.bz2/.xz\*(C'\fR. This can be useful on Windows, where 7\-zip is somewhat easier to install than 
\&\fBgzip\fR or \fBbzip2\fR. The \fB7z\fR executable must be findable via your \s-1PATH\s0 to use this option.
.IP "\fB\s-1CWB_COMPRESSOR_PATH\s0\fR" 4
.IX Item "CWB_COMPRESSOR_PATH"
If set to a directory, this environment variable explicitly specifies the location of the \fBgzip\fR, \fBbzip2\fR, \fBxz\fR and/or \fB7z\fR
programs used to (de)compress input and output files with the relevant file extensions. 
This overrides the normal behaviour, which is to assume that these executables are findable via your \s-1PATH\s0 variable.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cqp, cqpcl, cqpserver, cwb-makeall, cwb-huffcode, cwb-compress-rdx, 
cwb-align-encode, cwb-s-encode, cwb-decode, cwb-align-decode, cwb-lexdecode, cwb-s-decode,
cwb-config, cwb-describe-corpus, cwb-atoi, cwb-itoa,
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
\&\fB\s-1IMS\s0 Open Corpus Workbench (\s-1CWB\s0)\fR <http://cwb.sourceforge.net/>
.PP
Copyright (C) 1993\-2006 by \s-1IMS,\s0 University of Stuttgart
.PP
Copyright (C) 2007\- by the respective contributers (see file \fI\s-1AUTHORS\s0\fR)
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT
ANY WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS
FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details
(in the file \fI\s-1COPYING\s0\fR, or available via \s-1WWW\s0 at
<http://www.gnu.org/copyleft/gpl.html>).
