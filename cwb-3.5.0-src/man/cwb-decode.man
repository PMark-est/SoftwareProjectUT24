.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CWB-DECODE 1"
.TH CWB-DECODE 1 "2022-07-22" "3.5.0" "IMS Open Corpus Workbench"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cwb\-decode \- Utility for decoding a CWB corpus into various text formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBcwb-decode\fR (\-L|\-H|\-C|\-Cx|\-X) [\-n] [\-b \fIattribute\fR] [\-r \fIregistry_dir\fR]
    [\-s \fIstart\fR] [\-e \fIend\fR] [\-p | \-f \fIfile\fR] [\-Sp | \-Sf \fIfile\fR]
    \fIcorpus\fR  [\-c \fIattribute\fR] [\-ALL]
    (\-P \fIattribute\fR|\-S \fIattribute\fR|\-V \fIattribute\fR|\-A \fIattribute\fR)+
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBcwb-decode\fR extracts an encoded \s-1CWB\s0 corpus as plain text (or in various other text formats).
.PP
In normal mode, the entire corpus (or a segment specified with the \f(CW\*(C`\-s\*(C'\fR and \f(CW\*(C`\-e\*(C'\fR options) 
is printed.
.PP
In matchlist mode (\f(CW\*(C`\-p\*(C'\fR or \f(CW\*(C`\-f\*(C'\fR), (pairs of) corpus positions are read from standard input 
or a file specified with \f(CW\*(C`\-f\*(C'\fR, and the corresponding tokens or ranges are displayed. These
start and end positions are expected in the first two whitespace-delimited fields of each line;
any additional fields are silently ignored. See \*(L"\s-1OUTPUT FORMATS\*(R"\s0 for the effect of matchlist
mode on different output modes.
.PP
In subcorpus mode (\f(CW\*(C`\-Sp\*(C'\fR or \f(CW\*(C`\-Sf\*(C'\fR), all s\-attribute start and end tags in the corpus are printed,
but tokens (i.e. p\-attributes) outside the selected ranges are suppressed.  Since \fBcwb-encode\fR 
ignores empty s\-attribute regions, subcorpus mode can be used to create a physical subcorpus for
a sequence of cpos ranges. The input format is the same as in matchlist mode.
.PP
In either case, the output is to standard output; any accompanying error or warning messages are printed to
standard error.
.PP
The attribute declaration flags \f(CW\*(C`\-P\*(C'\fR, \f(CW\*(C`\-S\*(C'\fR, \f(CW\*(C`\-V\*(C'\fR and \f(CW\*(C`\-A\*(C'\fR determine which attributes will be printed; 
use \f(CW\*(C`\-ALL\*(C'\fR for all attributes.
.PP
See \*(L"\s-1OUTPUT FORMATS\*(R"\s0 below for available output modes. If no output format is specified, Standard format will be used.
.PP
Command-line \fBoptions\fR (which control the output format, range of corpus positions, etc.) 
must be specified before the \fIcorpus\fR name, while \fBattribute declarations\fR (which select attributes 
to be displayed) must follow the \fIcorpus\fR name. The corpus name is compulsory, and
must be given in the ALL-UPPERCASE version.
.PP
\&\fBcwb-decode\fR will look for the specified corpus in the registry directory, as usual. If a registry
location is not specified with the \fB\-r\fR option, then either a directory specified by the \s-1CORPUS_REGISTRY\s0
environment variable, or \s-1CWB\s0's built-in default registry will be used.
.SH "OPTIONS"
.IX Header "OPTIONS"
Please note that the \s-1CWB\s0 utilities do not currently support GNU-style \f(CW\*(C`\-\-long\-options\*(C'\fR.
.IP "\fB\-b\fR \fIattribute\fR" 4
.IX Item "-b attribute"
Print a blank line at the end of each region of s\-attribute \fIattribute\fR. It will be printed after the last token of the region, following any \s-1XML\s0 end tags and alignment attributes. Note that the blank line is only printed if this last token is part of the output.
.Sp
The \fB\-b\fR option is intended to be used with \fB\-C\fR or \fB\-Cn\fR mode in order to produce CoNLL-style output files (see \s-1EXAMPLES\s0 below).
.IP "\fB\-C\fR" 4
.IX Item "-C"
Activates compact output mode (suitable for piping to \fBcwb-encode\fR).
.IP "\fB\-Cx\fR" 4
.IX Item "-Cx"
Activates XML-compatible compact output mode (for \f(CW\*(C`cwb\-encode \-x ...\*(C'\fR).
.IP "\fB\-e\fR \fIend\fR" 4
.IX Item "-e end"
Specifies the end point (inclusive) for output; the last token printed will be corpus position \fIend\fR.
.IP "\fB\-f\fR \fIfile\fR" 4
.IX Item "-f file"
Activates matchlist mode (with input from \fIfile\fR). Files with extension \f(CW\*(C`.gz\*(C'\fR or \f(CW\*(C`.bz2\*(C'\fR are automatically decompressed.
.IP "\fB\-h\fR" 4
.IX Item "-h"
Displays \fBcwb-decode\fR's help message, with short information about the usage of the command line options.  
This usage message will be also shown if \fBcwb-decode\fR is called with invalid options.
After the usage message is printed, \fBcwb-decode\fR will exit.
.IP "\fB\-H\fR" 4
.IX Item "-H"
Activates concordance line ('horizontal') output mode.
.IP "\fB\-L\fR" 4
.IX Item "-L"
Activates Lisp output mode.
.IP "\fB\-n\fR" 4
.IX Item "-n"
Activates printing of corpus positions (\*(L"numbers\*(R") alongside each token. The precise format of the corpus
positions depends on which output mode is activated. For instance, they will appear as attribute values
in \s-1XML\s0 mode; as a first positional column in standard mode.
.IP "\fB\-p\fR" 4
.IX Item "-p"
Activates matchlist mode (with input from standard input).
.IP "\fB\-r\fR \fIregistry_dir\fR" 4
.IX Item "-r registry_dir"
Specifies that the registry directory should be \fIregistry_dir\fR on startup,
instead of the standard registry. If this option is not specified, then a directory 
specified by the \s-1CORPUS_REGISTRY\s0 environment variable will be used; if that is not available, 
the built-in \s-1CWB\s0 default will be used.
.IP "\fB\-s\fR \fIstart\fR" 4
.IX Item "-s start"
Specifies the start point for output; the first token printed will be corpus position \fIstart\fR.
.IP "\fB\-Sf\fR \fIfile\fR" 4
.IX Item "-Sf file"
Activates subcorpus mode (with input from \fIfile\fR).
.IP "\fB\-Sp\fR" 4
.IX Item "-Sp"
Activates subcorpus mode (with input from standard input).
.IP "\fB\-X\fR" 4
.IX Item "-X"
Activates \s-1XML\s0 output mode.
.SH "ATTRIBUTE DECLARATIONS"
.IX Header "ATTRIBUTE DECLARATIONS"
.IP "\fB\-P\fR \fIattribute\fR" 4
.IX Item "-P attribute"
Declares that p\-attribute \fIattribute\fR should be printed.
.IP "\fB\-S\fR \fIattribute\fR" 4
.IX Item "-S attribute"
Declares that s\-attribute \fIattribute\fR should be printed 
(possibly including annotations, if they are present).
.IP "\fB\-S\fR [\fIname\fR=]\fIattribute\fR[:\fIn\fR][+\fIav1\fR+\fIav2\fR+...]" 4
.IX Item "-S [name=]attribute[:n][+av1+av2+...]"
This extended declaration can be used to modify the \s-1XML\s0 tags printed by \fBcwb-decode\fR:
.RS 4
.IP "\fIname\fR=" 4
.IX Item "name="
Display an \s-1XML\s0 element name \fIname\fR in the output that is different from the attribute name.
E.g. \f(CW\*(C`\-S text=novel\*(C'\fR prints regions of the s\-attribute \f(CW\*(C`novel\*(C'\fR as \f(CW\*(C`<text> ... </text>\*(C'\fR.
.IP ":\fIn\fR" 4
.IX Item ":n"
Reconstruct nested \s-1XML\s0 elements up to depth \fIn\fR, which have been broken up into individual s\-attributes by a corresponding declaration in \fBcwb-encode\fR.
E.g. \-S\ np:2 prints regions of three s\-attributes \f(CW\*(C`np\*(C'\fR, \f(CW\*(C`np1\*(C'\fR and \f(CW\*(C`np2\*(C'\fR as nested elements \f(CW\*(C`<np> ... </np>\*(C'\fR.
.IP "+\fIav1\fR+\fIav2\fR+..." 4
.IX Item "+av1+av2+..."
Reconstruct attribute-value pairs in \s-1XML\s0 start tags, which have been broken up into individual s\-attributes by a corresponding declaration in \fBcwb-encode\fR.
E.g. \-S\ text+id+title will access the additional s\-attributes \f(CW\*(C`text_id\*(C'\fR and \f(CW\*(C`text_title\*(C'\fR to print regions of the form \f(CW\*(C`<text id=".." title=".."> ... </text>\*(C'\fR.
Annotated values for \fIattribute\fR itself will be ignored with a warning.
.RE
.RS 4
.RE
.IP "\fB\-V\fR \fIattribute\fR" 4
.IX Item "-V attribute"
In matchlist mode only, declares that the s\-attribute annotation that surrounds each input range should be printed.
Note that it does not normally make sense to declare the same s\-attribute with both \fB\-S\fR and \fB\-V\fR.
.IP "\fB\-A\fR \fIattribute\fR" 4
.IX Item "-A attribute"
Declares that a\-attribute \fIattribute\fR should be printed.
.IP "\fB\-ALL\fR" 4
.IX Item "-ALL"
Declares that all p\-attributes and s\-attributes should be printed. 
A\-attributes must still be added manually, if required.
.IP "\fB\-c\fR \fIattribute\fR" 4
.IX Item "-c attribute"
Sets a context attribute. In matchlist mode only, each range will be expanded to a full containing \fIattribute\fR region.
In \*(L"normal\*(R" mode with concordance style output, each individual token will be printed within its full containing \fIattribute\fR.
.SH "OUTPUT FORMATS"
.IX Header "OUTPUT FORMATS"
.IP "\fBStandard output\fR" 4
.IX Item "Standard output"
This output mode is used if no other mode is explicitly specified.
.Sp
Each token is printed on a separate line. Corpus position numbers, if activated, are printed
at the start of the line, followed by a colon. All types of attributes are printed on the
line, each one separateed by tabs. The form for p\-attributes is an
\&\f(CW\*(C`\f(CIattribute\f(CW=\f(CIvalue\f(CW\*(C'\fR pair. S\-attributes and a\-attributes are given as 
\&\f(CW\*(C`\f(CI<attribute\f(CW>:\f(CIstart\f(CW\-\f(CIend\f(CW\*(C'\fR and \f(CW\*(C`\f(CIstart1\f(CW\-\f(CIend1\f(CW==>\f(CIattribute\f(CW:\f(CIstart2\f(CW\-\f(CIend2\f(CW\*(C'\fR
respectively.
.Sp
In matchlist mode, if a context attribute is being used, it is printed as
a line at the start of each match: this begins with \s-1TARGET\s0 or \s-1INTERVAL,\s0
followed by (respectively) one or two integers indicating the extent of the
context being shown.
.Sp
\&\*(L"Surrounding\*(R" s\-attribute values in matchlist mode are shown on a single line each,
in the form \f(CW\*(C`<\f(CIattribute\f(CW \f(CIvalue\f(CW>\*(C'\fR .
.IP "\fBCompact output\fR" 4
.IX Item "Compact output"
This output format is designed so that it can also serve as input to \fBcwb-encode\fR.
.Sp
As in standard mode, one token is printed per line. However, only p\-attributes are
shown on token lines. S\-attributes and a\-attributes are instead shown on separate
lines, in pseudo-XML-esque form.
.Sp
S\-attributes are printed in the form \f(CW\*(C`<\f(CIattribute\f(CW \f(CIannotation\f(CW>\*(C'\fR,
with simple closing tags \f(CW\*(C`</\f(CIattribute\f(CW>\*(C'\fR. It is also possible to reconstruct
nesting and attribute-value pairs in start tags broken up by \fBcwb-encode\fR into
multiple s\-attributes (see \*(L"\s-1ATTRIBUTE DECLARATIONS\*(R"\s0 above).
.Sp
A\-attributes are given as simple unvalued tags, unless printing of token numbers
is enabled, in which case the a\-attribute tags will contain a pair of numbers
representing the start and end points of the corresponding region in the aligned corpus.
These numbers will also appear in the closing tag of the a\-attribute.
.Sp
In matchlist or subcorpus mode, if a context attribute is being used, it is not actually
shown in the output (but the context expansion is still applied).
.Sp
In matchlist mode, the values of \*(L"surrounding\*(R" s\-attributes (\f(CW\*(C`\-V\*(C'\fR) are shown in the form
of a comment \- a line formatted as \f(CW\*(C`# \f(CIattribute\f(CW=\f(CIvalue\f(CW\*(C'\fR . These comments
may need to be stripped before the output is sent to \fBcwb-encode\fR; they will automatically
be ignored in numbered input mode (\f(CW\*(C`\-n\*(C'\fR). A blank line is printed after each match.
.Sp
In subcorpus mode, neither comments nor blank lines are included in the output.
.IP "\fBXML-compatible compact output\fR" 4
.IX Item "XML-compatible compact output"
This is the same as compact output, except that:
.RS 4
.IP "\(bu" 4
Strings are printed with certain characters ( \f(CW\*(C`" \*(Aq < > &\*(C'\fR ) represented by the 
corresponding \s-1XML\s0 entities.
.IP "\(bu" 4
There is an \s-1XML\s0 declaration at the start of the output.
.IP "\(bu" 4
The whole output is wrapped in a \f(CW\*(C`<corpus>\*(C'\fR element, or a \f(CW\*(C`<matchlist>\*(C'\fR element 
in matchlist mode.
.RE
.RS 4
.Sp
Note that in contrast to \s-1XML\s0 output, the individual tokens are \fInot\fR represented
by \s-1XML\s0 structures, and the tags indicating s\-attributes and a\-attributes are not different
from their form in normal compact mode.
.RE
.ie n .IP "\fBConcordance-line (""horizontal"") output\fR" 4
.el .IP "\fBConcordance-line (``horizontal'') output\fR" 4
.IX Item "Concordance-line (horizontal) output"
This mode makes \fBcwb-decode\fR's output resemble the format of a \s-1CQP\s0 concordance as
closely as possible. Most types of attribute are shown in a very similar way to 
how they appear in compact output mode. However, they are adjusted so that many
tokens can be presented on a single line.
.Sp
For example, corpus position numbers are shown at the start of each line (where
requested), rather than repeatedly on the line alongside every token. This matches
the formatting used by \s-1CQP.\s0
.Sp
S\-attributes and a\-attributes are shown in the same pseudo-XML format as in compact mode,
but on the same line.
.Sp
It's important to note that in \*(L"normal\*(R" mode, you will still only see one token per line
(because only one token at a time is being printed) \- although you can use a context
s\-attribute to expand the number of tokens printed on each line, there will still be one line
per token. It is in matchlist mode that this output format is especially useful.
.Sp
Tokens are separated by spaces. In matchlist mode, sequences of tokens are separated by newline
characters. Within each token, p\-attributes are delimited by the forward slash. Note
that forward-slash is not escaped in any way when it occurs as part of one of the 
p\-attributes' values.
.Sp
In matchlist mode, if a context attribute is used, it is not actually printed.
.Sp
The values of \*(L"surrounding\*(R" s\-attributes in matchlist mode are shown as
the same kind of pseudo-XML tag used in standard mode, but this is set off
from the remainder of the line with a colon, as follows: \f(CW\*(C`<\f(CIattribute\f(CW \f(CIvalue\f(CW>:\*(C'\fR
.IP "\fBLisp output mode\fR" 4
.IX Item "Lisp output mode"
All data structures are represented as well-formed list objects in \fB(\fRparentheses\fB)\fR.
.Sp
P\-attribute values are given in the form \f(CW\*(C`(\f(CIattribute_name\f(CW \f(CIattribute_value\f(CW)\*(C'\fR. These are, in
turn, contained in a single list per token (which will begin with the corpus position number,
if the \fB\-n\fR option has been selected).
.Sp
When a context attribute is being used (\fB\-c\fR), the set of tokens (in matchlist mode) is then contained in a
\&\f(CW\*(C`(TARGET \f(CIcpos\f(CW...)\*(C'\fR structure. Additonally, if more than one token is contained within this \s-1TARGET,\s0
the first object within the \s-1TARGET\s0 list is an \f(CW\*(C`INTERVAL \f(CIfrom_cpos\f(CW \f(CIto_cpos\f(CW)\*(C'\fR structure.
.Sp
In matchlist mode, each sequence of matches begins with a \f(CW\*(C`CONTEXT \f(CIfrom_cpos\f(CW \f(CIto_cpos\f(CW)\*(C'\fR structure.
.IP "\fB\s-1XML\s0 output\fR" 4
.IX Item "XML output"
An \s-1XML\s0 declaration is given at the start of the output.
.Sp
Strings are printed with certain characters ( \f(CW\*(C`" \*(Aq < > &\*(C'\fR ) represented by the 
corresponding \s-1XML\s0 entities.
.Sp
The whole output is wrapped in a \f(CW\*(C`<corpus>\*(C'\fR element, or a \f(CW\*(C`<matchlist>\*(C'\fR element with groups 
of \f(CW\*(C`<match>\*(C'\fR elements in matchlist mode.
.Sp
Each token is contained in a \f(CW\*(C`<token>\*(C'\fR element. 
The contents of the p\-attributes within each token are given in the form 
\&\f(CW\*(C`<attr name="...">...</attr>\*(C'\fR .
.Sp
Token numbers, where requested, are given as \f(CW\*(C`cpos\*(C'\fR attributes on the \f(CW\*(C`<token>\*(C'\fR elements. 
Corpus positions (start and end) will also be shown on elements representing a\-attributes and 
s\-attributes if numbers have been requested.
.Sp
S\-attributes and p\-attributes are printed before the token element they are associated with, in the form
\&\f(CW\*(C`<align type="start" target="..." />\*(C'\fR and \f(CW\*(C`<tag type="start" name="..." />\*(C'\fR .
The end points, printed after the token elements they are associated, are the same, except that \fItype\fR is 
given as \fIend\fR.
.Sp
In matchlist mode, the values of \*(L"surrounding\*(R" s\-attributes declared with \fB\-V\fR 
are given before the contents of each match, in the form \f(CW\*(C`<element name="..." value="..."/>\*(C'\fR .
.Sp
In matchlist mode, if extended context is requested with the \fB\-c\fR declaration, this is shown in the form
\&\f(CW\*(C`<context start="\f(CIcpos\f(CW" end="\f(CIcpos\f(CW"/>\*(C'\fR .
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1CORPUS_REGISTRY\s0\fR" 4
.IX Item "CORPUS_REGISTRY"
If set, this environment variable specifies the location of the corpus registry directory. 
The \s-1CORPUS_REGISTRY\s0 is overruled by the \fB\-r\fR option, if present; if neither of these means
of specifying the registry is used, then the built-in \s-1CWB\s0 default registry location will be used.
.IP "\fB\s-1CWB_USE_7Z\s0\fR" 4
.IX Item "CWB_USE_7Z"
If this environment variable is set (to any non-empty value), then \fBcwb-decode\fR will attempt to use the \fB7z\fR program 
(part of the 7\-zip suite) rather than \fBgzip\fR, \fBbzip2\fR or \fBxz\fR when writing from or reading to filenames with the
extensions \f(CW\*(C`.gz/.bz2/.xz\*(C'\fR. This can be useful on Windows, where 7\-zip is somewhat easier to install than 
\&\fBgzip\fR or \fBbzip2\fR. The \fB7z\fR executable must be findable via your \s-1PATH\s0 to use this option.
.IP "\fB\s-1CWB_COMPRESSOR_PATH\s0\fR" 4
.IX Item "CWB_COMPRESSOR_PATH"
If set to a directory, this environment variable explicitly specifies the location of the \fBgzip\fR, \fBbzip2\fR, \fBxz\fR and/or \fB7z\fR
programs used to (de)compress input and output files with the relevant file extensions. 
This overrides the normal behaviour, which is to assume that these executables are findable via your \s-1PATH\s0 variable.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "CoNLL format"
.IX Subsection "CoNLL format"
The various \fBCoNLL\fR formats provide a simple representation of tokenized and annotated text collections,
which has become very popular in \s-1NLP\s0 (see e.g. <https://universaldependencies.org/format.html>).
A CoNLL-style file is understood here as a collection of sentences with token-level annotations (i.e. p\-attributes)
in verticalised text format, with an additional first column enumerating token positions within a sentence
(as targets for dependency links. Sentence boundaries are indicated by blank lines; there is no other structural annotation.
CoNLL files often contain comment lines (starting with \f(CW\*(C`#\*(C'\fR) that provide text-level metadata or other information for
human readers.
.PP
If a \s-1CWB\s0 corpus has been indexed with token numbers (say, in the p\-attribute \f(CW\*(C`id\*(C'\fR), it can easily be decoded
into a CoNLL-like format by combining compact output mode (\f(CW\*(C`\-C\*(C'\fR) with \f(CW\*(C`\-b s\*(C'\fR to insert a blank line after each sentence.
.PP
.Vb 1
\&  cwb\-decode \-C \-b s CORPUS \-P id \-P word \-P pos \-P lemma > conll_format.txt
.Ve
.PP
Note that \f(CW\*(C`id\*(C'\fR must be printed in the first column and that no s\-attributes (\f(CW\*(C`\-S\*(C'\fR flags) may be included.
If token numbers haven't been annotated, use \f(CW\*(C`\-n\*(C'\fR to insert corpus positions in the first column:
.PP
.Vb 1
\&  cwb\-decode \-Cn \-b s CORPUS \-P word \-P pos \-P lemma > conll_format.txt
.Ve
.PP
An alternative approach uses matchlist mode to export all (or selected) sentences, which makes it possible to
include metadata in comment lines at the start of each sentence. Matchlist mode already inserts blank lines,
so the \f(CW\*(C`\-b\*(C'\fR option is superfluous.
.PP
.Vb 3
\&  cwb\-s\-decode CORPUS \-S s 
\&    | cwb\-decode \-Cn \-p CORPUS \-P word \-P pos \-P lemma \-V text_id \-V s_len 
\&    > conll_format.txt
.Ve
.PP
Selected sentences can be obtained with a suitable \s-1CQP\s0 query and \f(CW\*(C`dump\*(C'\fRed to the \f(CW\*(C`cwb\-decode\*(C'\fR command:
.PP
.Vb 3
\&  cqpcl \-D CORPUS \*(AqA = [lemma="elephant"] expand to s; dump A;\*(Aq
\&    | cwb\-decode \-Cn \-p CORPUS \-P word \-P pos \-P lemma \-V text_id \-V s_len 
\&    > conll_format.txt
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cqp, cwb-describe-corpus, cwb-encode, cwb-s-decode, cwb-lexdecode, cwb-align-decode, cwb-scan-corpus.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
\&\fB\s-1IMS\s0 Open Corpus Workbench (\s-1CWB\s0)\fR <http://cwb.sourceforge.net/>
.PP
Copyright (C) 1993\-2006 by \s-1IMS,\s0 University of Stuttgart
.PP
Copyright (C) 2007\- by the respective contributers (see file \fI\s-1AUTHORS\s0\fR)
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT
ANY WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS
FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details
(in the file \fI\s-1COPYING\s0\fR, or available via \s-1WWW\s0 at
<http://www.gnu.org/copyleft/gpl.html>).
